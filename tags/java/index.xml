<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Markus&#39; Notebook</title>
    <link>https://blog.mrbuk.de/tags/java/</link>
    <description>Recent content in java on Markus&#39; Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Mar 2014 23:20:27 +0200</lastBuildDate>
    
	<atom:link href="https://blog.mrbuk.de/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pseudo Java Profiler aka sorted thread dump</title>
      <link>https://blog.mrbuk.de/post/pseudo-java-profiler/</link>
      <pubDate>Wed, 05 Mar 2014 23:20:27 +0200</pubDate>
      
      <guid>https://blog.mrbuk.de/post/pseudo-java-profiler/</guid>
      <description>Ever wondered what your multi threaded Java application is doing? A thread dump sorted by CPU consumption can help to find out. Having only access to a shell (bash) as well as to the tools bundled with the JDK I came up with the following solution
#!/bin/bash if [ &amp;quot;$#&amp;quot; -ne 1 ]; then echo &amp;quot;Usage: $0 jps-filter-grep-expr&amp;quot; exit 1 fi jps_filter=$1 # extract the PID of the java process java_app_pid=$(jps -lvm | grep ${jps_filter} | awk &#39;{print $1}&#39;) # get 10 top consuming threads top_consuming_threads=$(top -n1 -H -p ${java_app_pid} | \ egrep java | egrep -o &#39;^[^0-9]*[0-9]+ &#39; | \ sed -r &#39;s/[^0-9]+//g&#39; | head) temp_file=$(mktemp) # create jstack_output jstack ${java_app_pid} &amp;gt; ${temp_file} # print for every thread the current stack trace for thread in ${top_consuming_threads}; do echo &amp;quot;Stack trace for Thread &#39;${thread}&#39;:&amp;quot; printf -v thread_hex &amp;quot;%x&amp;quot; $thread grep -A10 &amp;quot;nid=0x${thread_hex}&amp;quot; ${temp_file} echo done; rm ${temp_file}  What we are doing to achieve that is the following:</description>
    </item>
    
  </channel>
</rss>