<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Markus&#39; Notebook</title>
    <link>http://mrbuk.de/</link>
    <description>Recent content on Markus&#39; Notebook</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Oct 2016 21:04:57 +0200</lastBuildDate>
    
	<atom:link href="http://mrbuk.de/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory/disk allocation of Cloud Foundry apps</title>
      <link>http://mrbuk.de/post/memory-disk-allocation-cloud-foundry/</link>
      <pubDate>Tue, 04 Oct 2016 21:04:57 +0200</pubDate>
      
      <guid>http://mrbuk.de/post/memory-disk-allocation-cloud-foundry/</guid>
      <description>With the help of the cf api, cf cli and jq one can pretty easily check the amount of memory/storage allocated for apps/containers deployed in CF:
cf curl /v2/apps | jq &#39;[.resources[].entity | \ select(.memory &amp;gt; 1) | \ {&amp;quot;mem&amp;quot;: . | (.memory * .instances), \ &amp;quot;disk&amp;quot;: . | (.disk_quota * .instances)}] | \ {&amp;quot;instances&amp;quot;: map(.) | length, \ &amp;quot;mem_total&amp;quot;: map(.mem) | add, \ &amp;quot;disk_total&amp;quot;: map(.disk) | add}&#39; { &amp;quot;instances&amp;quot;: 5, &amp;quot;mem_total&amp;quot;: 32768, &amp;quot;disk_total&amp;quot;: 32768 }  Values are in MB.</description>
    </item>
    
    <item>
      <title>Docker Machine wrong IP with Fusion driver</title>
      <link>http://mrbuk.de/post/docker-machine-fusion-ip/</link>
      <pubDate>Fri, 29 Jan 2016 20:00:07 +0200</pubDate>
      
      <guid>http://mrbuk.de/post/docker-machine-fusion-ip/</guid>
      <description>Using docker-machine with VMWare Fusion may result in some weird behaviour if one has configured a static lease for the machine that docker will use.
After trying to start the Docker VM using docker-machine an error message was printed that told me that the IP address changed and hence the certificates are not valid anymore. Option 1 regenerating the certificates didn&amp;rsquo;t sound right. Option 2 configuring a static lease for the VM sounded better.</description>
    </item>
    
    <item>
      <title>Pseudo Java Profiler aka sorted thread dump</title>
      <link>http://mrbuk.de/post/pseudo-java-profiler/</link>
      <pubDate>Wed, 05 Mar 2014 23:20:27 +0200</pubDate>
      
      <guid>http://mrbuk.de/post/pseudo-java-profiler/</guid>
      <description>Ever wondered what your multi threaded Java application is doing? A thread dump sorted by CPU consumption can help to find out. Having only access to a shell (bash) as well as to the tools bundled with the JDK I came up with the following solution
#!/bin/bash if [ &amp;quot;$#&amp;quot; -ne 1 ]; then echo &amp;quot;Usage: $0 jps-filter-grep-expr&amp;quot; exit 1 fi jps_filter=$1 # extract the PID of the java process java_app_pid=$(jps -lvm | grep ${jps_filter} | awk &#39;{print $1}&#39;) # get 10 top consuming threads top_consuming_threads=$(top -n1 -H -p ${java_app_pid} | \ egrep java | egrep -o &#39;^[^0-9]*[0-9]+ &#39; | \ sed -r &#39;s/[^0-9]+//g&#39; | head) temp_file=$(mktemp) # create jstack_output jstack ${java_app_pid} &amp;gt; ${temp_file} # print for every thread the current stack trace for thread in ${top_consuming_threads}; do echo &amp;quot;Stack trace for Thread &#39;${thread}&#39;:&amp;quot; printf -v thread_hex &amp;quot;%x&amp;quot; $thread grep -A10 &amp;quot;nid=0x${thread_hex}&amp;quot; ${temp_file} echo done; rm ${temp_file}  What we are doing to achieve that is the following:</description>
    </item>
    
  </channel>
</rss>